<?php

namespace Sim\Form\Interfaces;

use Sim\Form\Abstracts\AbstractFieldComposite;
use Sim\Form\ExpandableElement;

interface IFormElement extends IRenderer
{
    /**
     * Set name of element
     *
     * @param string $name
     * @return static
     */
    public function setName(string $name);

    /**
     * Get name of element
     *
     * @return string
     */
    public function getName(): string;

    /**
     * Get autogenerated specific id of element
     *
     * @return string
     */
    public function getIdentifier(): string;

    /**
     * @param string $tag_name
     * @return static
     */
    public function setTagName(string $tag_name);

    /**
     * @return string|null
     */
    public function getTagName(): string;

    /**
     * @param string $value
     * @return static
     */
    public function setValue(string $value = '');

    /**
     * @param AbstractFieldComposite|null $parent
     * @return static
     */
    public function setParent(?AbstractFieldComposite $parent);

    /**
     * @return AbstractFieldComposite|null
     */
    public function getParent();

    /**
     * @return AbstractFieldComposite
     */
    public function errorElement(): AbstractFieldComposite;

    /**
     * @param bool $answer
     * @return static
     */
    public function haveError(bool $answer);

    /**
     * Set a value to an attribute
     *
     * @param string $attribute
     * @param string $value
     * @return static
     */
    public function setAttribute(string $attribute, string $value);

    /**
     * Get value of an attribute
     *
     * @param string $attribute
     * @return string
     */
    public function getAttribute(string $attribute): string;

    /**
     * Set element attributes
     *
     * @param array $attributes
     * @return static
     */
    public function setAttributes(array $attributes);

    /**
     * Get all element's attributes
     *
     * @return array
     */
    public function getAttributes(): array;
}